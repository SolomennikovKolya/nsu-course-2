
#include <Windows.h>
#include <fstream>
#include <iostream>
#include <new>
#include <vector>

constexpr int CacheSize = 8 * 1024 * 1024; // (размер L3 = 8MB)
// constexpr int IntsNum = CacheSize / sizeof(int); // Количество int-ов, которые влезут в кэш память
// constexpr int ArrSize = IntsNum * 2;             // С запасом в 2 раза
// constexpr int Offset = 1 * 1024 * 1024; // 1MB
constexpr int Offset = 1024 * 1024 / 4; // 0.25MB
const int Loops = 3;                    // Для большей точности

using namespace std;

void ShowPageSize()
{
    SYSTEM_INFO systemInfo;
    GetSystemInfo(&systemInfo);
    cout << "Page Size Is: " << systemInfo.dwPageSize << "\n";
}

void ShowCacheSize()
{
    using CPUInfo = SYSTEM_LOGICAL_PROCESSOR_INFORMATION;
    DWORD len = 0;
    CPUInfo *buffer = nullptr;

    // Determine required length of a buffer
    if ((GetLogicalProcessorInformation(buffer, &len) == FALSE) && (GetLastError() == ERROR_INSUFFICIENT_BUFFER))
    {
        // Allocate buffer of required size
        buffer = new (std::nothrow) CPUInfo[len]{};

        if (buffer == nullptr)
        {
            std::cout << "Buffer allocation of " << len << " bytes failed" << std::endl;
        }
        else if (GetLogicalProcessorInformation(buffer, &len) != FALSE)
        {
            const DWORD count = len / sizeof(CPUInfo);
            for (DWORD i = 0; i < count; ++i)
            {
                // This will be true for multiple returned caches, we need just one
                if (buffer[i].Relationship == RelationCache)
                {
                    std::cout << "Cache line size is: " << buffer[i].Cache.LineSize << " bytes" << std::endl;
                    break;
                }
            }
        }
        else
        {
            std::cout << "ERROR: " << GetLastError() << std::endl;
        }
    }
}

int loadCPU()
{
    const int n = 500;
    vector<vector<int>> A(n, vector<int>(n, 10));
    vector<vector<int>> B(n, vector<int>(n, 10));
    vector<vector<int>> C(n, vector<int>(n, 10));
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < n; ++j)
            for (int k = 0; k < n; ++k)
                C[i][k] += A[i][j] * B[j][k];
    return C[0][0];
}

void fiilInArr(int *arr, const int fragments, const int fragmentSize)
{
    for (int i = 0; i < fragmentSize; ++i)
    {
        for (int j = 0; j < fragments - 1; ++j)
        {
            arr[j * Offset + i] = (j + 1) * Offset + i;
        }
        arr[(fragments - 1) * Offset + i] = i + 1;
    }
    arr[(fragments - 1) * Offset + fragmentSize - 1] = 0;
}

int main()
{
    // ShowPageSize(); // 4KB
    // ShowCacheSize(); // 64B = 16 * sizeof(int)

    ofstream out("results.txt"); // Для записи результатов
    loadCPU();

    for (int fragments = 1; fragments <= 32; ++fragments)
    {
        cout << fragments << " ";
        int *arr = new int[Offset * fragments];
        int fragmentSize = Offset;
        // int fragmentSize = CacheSize / fragments;
        // if (fragmentSize > Offset)
        //     fragmentSize = Offset;
        fiilInArr(arr, fragments, fragmentSize);

        int pos = 0;
        unsigned long long tick_start = __rdtsc();
        for (int i = 0; i < fragmentSize * fragments * Loops; ++i)
            pos = arr[pos];
        unsigned long long tick_finish = __rdtsc();
        if (pos != 0)
            cout << "How did it happen?\n";
        unsigned long long dt = tick_finish - tick_start;
        out << dt / (fragmentSize * fragments * Loops) << "\n";

        delete[] arr;
    }
    return 0;
}
